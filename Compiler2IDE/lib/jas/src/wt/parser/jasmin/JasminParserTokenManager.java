/* Generated By:JavaCC: Do not edit this line. JasminParserTokenManager.java */
package wt.parser.jasmin;
import java.io.*;
import java.util.*;
import de.fub.bytecode.*;
import de.fub.bytecode.generic.*;

public class JasminParserTokenManager implements JasminParserConstants
{
  public static  java.io.PrintStream debugStream = System.out;
  public static  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private static final int jjStopStringLiteralDfa_0(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x7ffe00L) != 0L)
            return 4;
         if ((active0 & 0x38000000000L) != 0L)
         {
            jjmatchedKind = 52;
            return 19;
         }
         return -1;
      case 1:
         if ((active0 & 0x38000000000L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 1;
            return 19;
         }
         return -1;
      case 2:
         if ((active0 & 0x38000000000L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 2;
            return 19;
         }
         return -1;
      case 3:
         if ((active0 & 0x38000000000L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 3;
            return 19;
         }
         return -1;
      case 4:
         if ((active0 & 0x38000000000L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 4;
            return 19;
         }
         return -1;
      case 5:
         if ((active0 & 0x38000000000L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 5;
            return 19;
         }
         return -1;
      case 6:
         if ((active0 & 0x18000000000L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 6;
            return 19;
         }
         if ((active0 & 0x20000000000L) != 0L)
            return 19;
         return -1;
      case 7:
         if ((active0 & 0x18000000000L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 7;
            return 19;
         }
         return -1;
      case 8:
         if ((active0 & 0x18000000000L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 8;
            return 19;
         }
         return -1;
      case 9:
         if ((active0 & 0x18000000000L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 9;
            return 19;
         }
         return -1;
      case 10:
         if ((active0 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 10;
            return 19;
         }
         if ((active0 & 0x10000000000L) != 0L)
            return 19;
         return -1;
      default :
         return -1;
   }
}
private static final int jjStartNfa_0(int pos, long active0)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
static private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
static private final int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 46:
         return jjMoveStringLiteralDfa1_0(0x7ffe00L);
      case 59:
         return jjStopAtPos(0, 6);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x20000000000L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x8000000000L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x10000000000L);
      default :
         return jjMoveNfa_0(9, 0);
   }
}
static private final int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000000L);
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0x600L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000000800L);
      case 102:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x600000L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x6000L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000000L);
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0x70000L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000L);
      case 118:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
static private final int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x100200L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000000L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x18000L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000000L);
      case 104:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x7000L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x400L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x400800L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000040000L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
static private final int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000400L);
      case 100:
         if ((active0 & 0x800L) != 0L)
            return jjStopAtPos(3, 11);
         break;
      case 101:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000L);
      case 107:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000000L);
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000000L);
      case 109:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000L);
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000L);
      case 112:
         return jjMoveStringLiteralDfa4_0(active0, 0x220000L);
      case 114:
         if ((active0 & 0x100000L) != 0L)
            return jjStopAtPos(3, 20);
         return jjMoveStringLiteralDfa4_0(active0, 0x80000L);
      case 116:
         if ((active0 & 0x10000L) != 0L)
            return jjStopAtPos(3, 16);
         return jjMoveStringLiteralDfa4_0(active0, 0x408200L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
static private final int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x200L);
      case 101:
         if ((active0 & 0x4000L) != 0L)
            return jjStopAtPos(4, 14);
         return jjMoveStringLiteralDfa5_0(active0, 0x10000420000L);
      case 104:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000L);
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x201000L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000L);
      case 115:
         return jjMoveStringLiteralDfa5_0(active0, 0x400L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x28000000000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
static private final int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0x40000L);
      case 100:
         if ((active0 & 0x1000L) != 0L)
            return jjStopAtPos(5, 12);
         break;
      case 101:
         return jjMoveStringLiteralDfa6_0(active0, 0x200000L);
      case 104:
         if ((active0 & 0x200L) != 0L)
            return jjStopAtPos(5, 9);
         break;
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x20000000000L);
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000L);
      case 112:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000000L);
      case 114:
         if ((active0 & 0x20000L) != 0L)
            return jjStopAtPos(5, 17);
         return jjMoveStringLiteralDfa6_0(active0, 0x400000L);
      case 115:
         if ((active0 & 0x400L) != 0L)
            return jjStopAtPos(5, 10);
         return jjMoveStringLiteralDfa6_0(active0, 0x10000000000L);
      case 116:
         if ((active0 & 0x2000L) != 0L)
            return jjStopAtPos(5, 13);
         break;
      case 119:
         return jjMoveStringLiteralDfa6_0(active0, 0x80000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0);
}
static private final int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 100:
         if ((active0 & 0x8000L) != 0L)
            return jjStopAtPos(6, 15);
         break;
      case 101:
         if ((active0 & 0x40000L) != 0L)
            return jjStopAtPos(6, 18);
         break;
      case 102:
         return jjMoveStringLiteralDfa7_0(active0, 0x400000L);
      case 109:
         return jjMoveStringLiteralDfa7_0(active0, 0x200000L);
      case 115:
         if ((active0 & 0x80000L) != 0L)
            return jjStopAtPos(6, 19);
         return jjMoveStringLiteralDfa7_0(active0, 0x8000000000L);
      case 116:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 41, 19);
         break;
      case 119:
         return jjMoveStringLiteralDfa7_0(active0, 0x10000000000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0);
}
static private final int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0x400000L);
      case 101:
         return jjMoveStringLiteralDfa8_0(active0, 0x200000L);
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0x10000000000L);
      case 119:
         return jjMoveStringLiteralDfa8_0(active0, 0x8000000000L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0);
}
static private final int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0);
      return 8;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa9_0(active0, 0x400000L);
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x8000000000L);
      case 110:
         return jjMoveStringLiteralDfa9_0(active0, 0x200000L);
      case 116:
         return jjMoveStringLiteralDfa9_0(active0, 0x10000000000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0);
}
static private final int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0);
      return 9;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa10_0(active0, 0x10000000000L);
      case 101:
         if ((active0 & 0x400000L) != 0L)
            return jjStopAtPos(9, 22);
         break;
      case 116:
         return jjMoveStringLiteralDfa10_0(active0, 0x8000200000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0);
}
static private final int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0);
      return 10;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa11_0(active0, 0x8000000000L);
      case 104:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 40, 19);
         break;
      case 115:
         if ((active0 & 0x200000L) != 0L)
            return jjStopAtPos(10, 21);
         break;
      default :
         break;
   }
   return jjStartNfa_0(9, active0);
}
static private final int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0);
      return 11;
   }
   switch(curChar)
   {
      case 104:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 39, 19);
         break;
      default :
         break;
   }
   return jjStartNfa_0(10, active0);
}
static private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
static private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
static private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
static private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
static private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec3 = {
   0x1ff00000fffffffeL, 0xffffffffffffc000L, 0xffffffffL, 0x600000000000000L
};
static final long[] jjbitVec4 = {
   0x0L, 0x0L, 0x0L, 0xff7fffffff7fffffL
};
static final long[] jjbitVec5 = {
   0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec6 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffL, 0x0L
};
static final long[] jjbitVec7 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0x0L, 0x0L
};
static final long[] jjbitVec8 = {
   0x3fffffffffffL, 0x0L, 0x0L, 0x0L
};
static private final int jjMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 40;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 9:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 6);
                  else if ((0x280000000000L & l) != 0L)
                     jjAddStates(7, 10);
                  else if ((0x1000001000000000L & l) != 0L)
                  {
                     if (kind > 52)
                        kind = 52;
                     jjCheckNAdd(19);
                  }
                  else if (curChar == 34)
                     jjCheckNAddStates(11, 13);
                  else if (curChar == 46)
                     jjCheckNAdd(4);
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 44)
                        kind = 44;
                     jjCheckNAddTwoStates(1, 2);
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 44)
                        kind = 44;
                     jjCheckNAddStates(14, 16);
                  }
                  break;
               case 0:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 44)
                     kind = 44;
                  jjCheckNAddTwoStates(1, 2);
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 44)
                     kind = 44;
                  jjCheckNAddTwoStates(1, 2);
                  break;
               case 3:
                  if (curChar == 46)
                     jjCheckNAdd(4);
                  break;
               case 4:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 49)
                     kind = 49;
                  jjCheckNAddStates(17, 19);
                  break;
               case 6:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(7);
                  break;
               case 7:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 49)
                     kind = 49;
                  jjCheckNAddTwoStates(7, 8);
                  break;
               case 10:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(11, 13);
                  break;
               case 12:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(11, 13);
                  break;
               case 13:
                  if (curChar == 34 && kind > 51)
                     kind = 51;
                  break;
               case 14:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(20, 23);
                  break;
               case 15:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(11, 13);
                  break;
               case 16:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 17:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(15);
                  break;
               case 18:
                  if ((0x1000001000000000L & l) == 0L)
                     break;
                  if (kind > 52)
                     kind = 52;
                  jjCheckNAdd(19);
                  break;
               case 19:
                  if ((0x5bffc31000000000L & l) == 0L)
                     break;
                  if (kind > 52)
                     kind = 52;
                  jjCheckNAdd(19);
                  break;
               case 20:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 6);
                  break;
               case 21:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(21, 22);
                  break;
               case 22:
                  if (curChar != 46)
                     break;
                  if (kind > 49)
                     kind = 49;
                  jjCheckNAddStates(24, 26);
                  break;
               case 23:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 49)
                     kind = 49;
                  jjCheckNAddStates(24, 26);
                  break;
               case 25:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(26);
                  break;
               case 26:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 49)
                     kind = 49;
                  jjCheckNAddTwoStates(26, 8);
                  break;
               case 27:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(27, 28);
                  break;
               case 29:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(30);
                  break;
               case 30:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 49)
                     kind = 49;
                  jjCheckNAddTwoStates(30, 8);
                  break;
               case 31:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(27, 29);
                  break;
               case 33:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(34);
                  break;
               case 34:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(34, 8);
                  break;
               case 35:
                  if (curChar != 48)
                     break;
                  if (kind > 44)
                     kind = 44;
                  jjCheckNAddStates(14, 16);
                  break;
               case 37:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 44)
                     kind = 44;
                  jjCheckNAddTwoStates(37, 2);
                  break;
               case 38:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 44)
                     kind = 44;
                  jjCheckNAddTwoStates(38, 2);
                  break;
               case 39:
                  if ((0x280000000000L & l) != 0L)
                     jjAddStates(7, 10);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 9:
               case 19:
                  if ((0x7fffffe8ffffffeL & l) == 0L)
                     break;
                  if (kind > 52)
                     kind = 52;
                  jjCheckNAdd(19);
                  break;
               case 2:
                  if ((0x100000001000L & l) != 0L && kind > 44)
                     kind = 44;
                  break;
               case 5:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(30, 31);
                  break;
               case 8:
                  if ((0x5000000050L & l) != 0L && kind > 49)
                     kind = 49;
                  break;
               case 10:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(11, 13);
                  break;
               case 11:
                  if (curChar == 92)
                     jjAddStates(32, 34);
                  break;
               case 12:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(11, 13);
                  break;
               case 24:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(35, 36);
                  break;
               case 28:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(37, 38);
                  break;
               case 32:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(39, 40);
                  break;
               case 36:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(37);
                  break;
               case 37:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 44)
                     kind = 44;
                  jjCheckNAddTwoStates(37, 2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 9:
               case 19:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 52)
                     kind = 52;
                  jjCheckNAdd(19);
                  break;
               case 10:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(11, 13);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 40 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static private final int jjMoveStringLiteralDfa0_2()
{
   return jjMoveNfa_2(0, 0);
}
static private final int jjMoveNfa_2(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x2400L & l) != 0L)
                  {
                     if (kind > 7)
                        kind = 7;
                  }
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if (curChar == 10 && kind > 7)
                     kind = 7;
                  break;
               case 2:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private static final int jjStopStringLiteralDfa_1(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x3ffff800000L) != 0L)
         {
            jjmatchedKind = 52;
            return 19;
         }
         return -1;
      case 1:
         if ((active0 & 0x3fffd000000L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 1;
            return 19;
         }
         if ((active0 & 0x2800000L) != 0L)
            return 19;
         return -1;
      case 2:
         if ((active0 & 0x3fffd000000L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 2;
            return 19;
         }
         return -1;
      case 3:
         if ((active0 & 0x3fff9000000L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 3;
            return 19;
         }
         if ((active0 & 0x4000000L) != 0L)
            return 19;
         return -1;
      case 4:
         if ((active0 & 0x3ffd8000000L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 4;
            return 19;
         }
         if ((active0 & 0x21000000L) != 0L)
            return 19;
         return -1;
      case 5:
         if ((active0 & 0x3f350000000L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 5;
            return 19;
         }
         if ((active0 & 0xc88000000L) != 0L)
            return 19;
         return -1;
      case 6:
         if ((active0 & 0x1f250000000L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 6;
            return 19;
         }
         if ((active0 & 0x20100000000L) != 0L)
            return 19;
         return -1;
      case 7:
         if ((active0 & 0x1b240000000L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 7;
            return 19;
         }
         if ((active0 & 0x4010000000L) != 0L)
            return 19;
         return -1;
      case 8:
         if ((active0 & 0x19000000000L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 8;
            return 19;
         }
         if ((active0 & 0x2240000000L) != 0L)
            return 19;
         return -1;
      case 9:
         if ((active0 & 0x19000000000L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 9;
            return 19;
         }
         return -1;
      case 10:
         if ((active0 & 0x9000000000L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 10;
            return 19;
         }
         if ((active0 & 0x10000000000L) != 0L)
            return 19;
         return -1;
      default :
         return -1;
   }
}
private static final int jjStartNfa_1(int pos, long active0)
{
   return jjMoveNfa_1(jjStopStringLiteralDfa_1(pos, active0), pos + 1);
}
static private final int jjStartNfaWithStates_1(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_1(state, pos + 1);
}
static private final int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 10:
         return jjStopAtPos(0, 5);
      case 58:
         return jjStopAtPos(0, 43);
      case 59:
         return jjStopAtPos(0, 6);
      case 61:
         return jjStopAtPos(0, 42);
      case 97:
         return jjMoveStringLiteralDfa1_1(0x10000000L);
      case 100:
         return jjMoveStringLiteralDfa1_1(0x20000000000L);
      case 102:
         return jjMoveStringLiteralDfa1_1(0x24000000L);
      case 105:
         return jjMoveStringLiteralDfa1_1(0x42000000L);
      case 108:
         return jjMoveStringLiteralDfa1_1(0x8000000000L);
      case 109:
         return jjMoveStringLiteralDfa1_1(0x8000000L);
      case 110:
         return jjMoveStringLiteralDfa1_1(0x80000000L);
      case 112:
         return jjMoveStringLiteralDfa1_1(0x700000000L);
      case 115:
         return jjMoveStringLiteralDfa1_1(0x1800000000L);
      case 116:
         return jjMoveStringLiteralDfa1_1(0x12000800000L);
      case 117:
         return jjMoveStringLiteralDfa1_1(0x1000000L);
      case 118:
         return jjMoveStringLiteralDfa1_1(0x4000000000L);
      default :
         return jjMoveNfa_1(9, 0);
   }
}
static private final int jjMoveStringLiteralDfa1_1(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa2_1(active0, 0x10080000000L);
      case 98:
         return jjMoveStringLiteralDfa2_1(active0, 0x10000000L);
      case 101:
         return jjMoveStringLiteralDfa2_1(active0, 0x20008000000L);
      case 105:
         return jjMoveStringLiteralDfa2_1(active0, 0x20000000L);
      case 110:
         return jjMoveStringLiteralDfa2_1(active0, 0x40000000L);
      case 111:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_1(1, 23, 19);
         return jjMoveStringLiteralDfa2_1(active0, 0xc000000000L);
      case 114:
         return jjMoveStringLiteralDfa2_1(active0, 0x2304000000L);
      case 115:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_1(1, 25, 19);
         return jjMoveStringLiteralDfa2_1(active0, 0x1000000L);
      case 116:
         return jjMoveStringLiteralDfa2_1(active0, 0x800000000L);
      case 117:
         return jjMoveStringLiteralDfa2_1(active0, 0x400000000L);
      case 121:
         return jjMoveStringLiteralDfa2_1(active0, 0x1000000000L);
      default :
         break;
   }
   return jjStartNfa_1(0, active0);
}
static private final int jjMoveStringLiteralDfa2_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(0, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa3_1(active0, 0x2800000000L);
      case 98:
         return jjMoveStringLiteralDfa3_1(active0, 0x10400000000L);
      case 102:
         return jjMoveStringLiteralDfa3_1(active0, 0x20000000000L);
      case 105:
         return jjMoveStringLiteralDfa3_1(active0, 0x101000000L);
      case 108:
         return jjMoveStringLiteralDfa3_1(active0, 0x4000000000L);
      case 110:
         return jjMoveStringLiteralDfa3_1(active0, 0x1020000000L);
      case 111:
         return jjMoveStringLiteralDfa3_1(active0, 0x8204000000L);
      case 115:
         return jjMoveStringLiteralDfa3_1(active0, 0x10000000L);
      case 116:
         return jjMoveStringLiteralDfa3_1(active0, 0xc8000000L);
      default :
         break;
   }
   return jjStartNfa_1(1, active0);
}
static private final int jjMoveStringLiteralDfa3_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(1, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa4_1(active0, 0x24020000000L);
      case 99:
         return jjMoveStringLiteralDfa4_1(active0, 0x1000000000L);
      case 101:
         return jjMoveStringLiteralDfa4_1(active0, 0x40000000L);
      case 104:
         return jjMoveStringLiteralDfa4_1(active0, 0x8000000L);
      case 105:
         return jjMoveStringLiteralDfa4_1(active0, 0x80000000L);
      case 107:
         return jjMoveStringLiteralDfa4_1(active0, 0x8000000000L);
      case 108:
         return jjMoveStringLiteralDfa4_1(active0, 0x10400000000L);
      case 109:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_1(3, 26, 19);
         break;
      case 110:
         return jjMoveStringLiteralDfa4_1(active0, 0x2001000000L);
      case 116:
         return jjMoveStringLiteralDfa4_1(active0, 0xa10000000L);
      case 118:
         return jjMoveStringLiteralDfa4_1(active0, 0x100000000L);
      default :
         break;
   }
   return jjStartNfa_1(2, active0);
}
static private final int jjMoveStringLiteralDfa4_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(2, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa5_1(active0, 0x100000000L);
      case 101:
         return jjMoveStringLiteralDfa5_1(active0, 0x10200000000L);
      case 103:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_1(4, 24, 19);
         break;
      case 104:
         return jjMoveStringLiteralDfa5_1(active0, 0x1000000000L);
      case 105:
         return jjMoveStringLiteralDfa5_1(active0, 0xc00000000L);
      case 108:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_1(4, 29, 19);
         break;
      case 111:
         return jjMoveStringLiteralDfa5_1(active0, 0x8000000L);
      case 114:
         return jjMoveStringLiteralDfa5_1(active0, 0x50000000L);
      case 115:
         return jjMoveStringLiteralDfa5_1(active0, 0x2000000000L);
      case 116:
         return jjMoveStringLiteralDfa5_1(active0, 0x4000000000L);
      case 117:
         return jjMoveStringLiteralDfa5_1(active0, 0x28000000000L);
      case 118:
         return jjMoveStringLiteralDfa5_1(active0, 0x80000000L);
      default :
         break;
   }
   return jjStartNfa_1(3, active0);
}
static private final int jjMoveStringLiteralDfa5_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(3, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa6_1(active0, 0x10000000L);
      case 99:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_1(5, 34, 19);
         else if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_1(5, 35, 19);
         return jjMoveStringLiteralDfa6_1(active0, 0x200000000L);
      case 100:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_1(5, 27, 19);
         break;
      case 101:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_1(5, 31, 19);
         break;
      case 102:
         return jjMoveStringLiteralDfa6_1(active0, 0x40000000L);
      case 105:
         return jjMoveStringLiteralDfa6_1(active0, 0x6000000000L);
      case 108:
         return jjMoveStringLiteralDfa6_1(active0, 0x20000000000L);
      case 112:
         return jjMoveStringLiteralDfa6_1(active0, 0x8000000000L);
      case 114:
         return jjMoveStringLiteralDfa6_1(active0, 0x1000000000L);
      case 115:
         return jjMoveStringLiteralDfa6_1(active0, 0x10000000000L);
      case 116:
         return jjMoveStringLiteralDfa6_1(active0, 0x100000000L);
      default :
         break;
   }
   return jjStartNfa_1(4, active0);
}
static private final int jjMoveStringLiteralDfa6_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(4, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa7_1(active0, 0x40000000L);
      case 99:
         return jjMoveStringLiteralDfa7_1(active0, 0x10000000L);
      case 101:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_1(6, 32, 19);
         return jjMoveStringLiteralDfa7_1(active0, 0x2000000000L);
      case 108:
         return jjMoveStringLiteralDfa7_1(active0, 0x4000000000L);
      case 111:
         return jjMoveStringLiteralDfa7_1(active0, 0x1000000000L);
      case 115:
         return jjMoveStringLiteralDfa7_1(active0, 0x8000000000L);
      case 116:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_1(6, 41, 19);
         return jjMoveStringLiteralDfa7_1(active0, 0x200000000L);
      case 119:
         return jjMoveStringLiteralDfa7_1(active0, 0x10000000000L);
      default :
         break;
   }
   return jjStartNfa_1(5, active0);
}
static private final int jjMoveStringLiteralDfa7_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(5, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa8_1(active0, 0x40000000L);
      case 101:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_1(7, 38, 19);
         return jjMoveStringLiteralDfa8_1(active0, 0x200000000L);
      case 105:
         return jjMoveStringLiteralDfa8_1(active0, 0x10000000000L);
      case 110:
         return jjMoveStringLiteralDfa8_1(active0, 0x3000000000L);
      case 116:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_1(7, 28, 19);
         break;
      case 119:
         return jjMoveStringLiteralDfa8_1(active0, 0x8000000000L);
      default :
         break;
   }
   return jjStartNfa_1(6, active0);
}
static private final int jjMoveStringLiteralDfa8_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(6, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(7, active0);
      return 8;
   }
   switch(curChar)
   {
      case 100:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_1(8, 33, 19);
         break;
      case 101:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_1(8, 30, 19);
         break;
      case 105:
         return jjMoveStringLiteralDfa9_1(active0, 0x9000000000L);
      case 116:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_1(8, 37, 19);
         return jjMoveStringLiteralDfa9_1(active0, 0x10000000000L);
      default :
         break;
   }
   return jjStartNfa_1(7, active0);
}
static private final int jjMoveStringLiteralDfa9_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(7, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(8, active0);
      return 9;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa10_1(active0, 0x10000000000L);
      case 116:
         return jjMoveStringLiteralDfa10_1(active0, 0x8000000000L);
      case 122:
         return jjMoveStringLiteralDfa10_1(active0, 0x1000000000L);
      default :
         break;
   }
   return jjStartNfa_1(8, active0);
}
static private final int jjMoveStringLiteralDfa10_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(8, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(9, active0);
      return 10;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa11_1(active0, 0x8000000000L);
      case 101:
         return jjMoveStringLiteralDfa11_1(active0, 0x1000000000L);
      case 104:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_1(10, 40, 19);
         break;
      default :
         break;
   }
   return jjStartNfa_1(9, active0);
}
static private final int jjMoveStringLiteralDfa11_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(9, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(10, active0);
      return 11;
   }
   switch(curChar)
   {
      case 100:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_1(11, 36, 19);
         break;
      case 104:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_1(11, 39, 19);
         break;
      default :
         break;
   }
   return jjStartNfa_1(10, active0);
}
static private final int jjMoveNfa_1(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 40;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 9:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 6);
                  else if ((0x280000000000L & l) != 0L)
                     jjAddStates(7, 10);
                  else if ((0x1000001000000000L & l) != 0L)
                  {
                     if (kind > 52)
                        kind = 52;
                     jjCheckNAdd(19);
                  }
                  else if (curChar == 34)
                     jjCheckNAddStates(11, 13);
                  else if (curChar == 46)
                     jjCheckNAdd(4);
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 44)
                        kind = 44;
                     jjCheckNAddTwoStates(1, 2);
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 44)
                        kind = 44;
                     jjCheckNAddStates(14, 16);
                  }
                  break;
               case 0:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 44)
                     kind = 44;
                  jjCheckNAddTwoStates(1, 2);
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 44)
                     kind = 44;
                  jjCheckNAddTwoStates(1, 2);
                  break;
               case 3:
                  if (curChar == 46)
                     jjCheckNAdd(4);
                  break;
               case 4:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 49)
                     kind = 49;
                  jjCheckNAddStates(17, 19);
                  break;
               case 6:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(7);
                  break;
               case 7:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 49)
                     kind = 49;
                  jjCheckNAddTwoStates(7, 8);
                  break;
               case 10:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(11, 13);
                  break;
               case 12:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(11, 13);
                  break;
               case 13:
                  if (curChar == 34 && kind > 51)
                     kind = 51;
                  break;
               case 14:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(20, 23);
                  break;
               case 15:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(11, 13);
                  break;
               case 16:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 17:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(15);
                  break;
               case 18:
                  if ((0x1000001000000000L & l) == 0L)
                     break;
                  if (kind > 52)
                     kind = 52;
                  jjCheckNAdd(19);
                  break;
               case 19:
                  if ((0x5bffc31000000000L & l) == 0L)
                     break;
                  if (kind > 52)
                     kind = 52;
                  jjCheckNAdd(19);
                  break;
               case 20:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 6);
                  break;
               case 21:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(21, 22);
                  break;
               case 22:
                  if (curChar != 46)
                     break;
                  if (kind > 49)
                     kind = 49;
                  jjCheckNAddStates(24, 26);
                  break;
               case 23:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 49)
                     kind = 49;
                  jjCheckNAddStates(24, 26);
                  break;
               case 25:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(26);
                  break;
               case 26:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 49)
                     kind = 49;
                  jjCheckNAddTwoStates(26, 8);
                  break;
               case 27:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(27, 28);
                  break;
               case 29:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(30);
                  break;
               case 30:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 49)
                     kind = 49;
                  jjCheckNAddTwoStates(30, 8);
                  break;
               case 31:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(27, 29);
                  break;
               case 33:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(34);
                  break;
               case 34:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(34, 8);
                  break;
               case 35:
                  if (curChar != 48)
                     break;
                  if (kind > 44)
                     kind = 44;
                  jjCheckNAddStates(14, 16);
                  break;
               case 37:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 44)
                     kind = 44;
                  jjCheckNAddTwoStates(37, 2);
                  break;
               case 38:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 44)
                     kind = 44;
                  jjCheckNAddTwoStates(38, 2);
                  break;
               case 39:
                  if ((0x280000000000L & l) != 0L)
                     jjAddStates(7, 10);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 9:
               case 19:
                  if ((0x7fffffe8ffffffeL & l) == 0L)
                     break;
                  if (kind > 52)
                     kind = 52;
                  jjCheckNAdd(19);
                  break;
               case 2:
                  if ((0x100000001000L & l) != 0L && kind > 44)
                     kind = 44;
                  break;
               case 5:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(30, 31);
                  break;
               case 8:
                  if ((0x5000000050L & l) != 0L && kind > 49)
                     kind = 49;
                  break;
               case 10:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(11, 13);
                  break;
               case 11:
                  if (curChar == 92)
                     jjAddStates(32, 34);
                  break;
               case 12:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(11, 13);
                  break;
               case 24:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(35, 36);
                  break;
               case 28:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(37, 38);
                  break;
               case 32:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(39, 40);
                  break;
               case 36:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(37);
                  break;
               case 37:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 44)
                     kind = 44;
                  jjCheckNAddTwoStates(37, 2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 9:
               case 19:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 52)
                     kind = 52;
                  jjCheckNAdd(19);
                  break;
               case 10:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(11, 13);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 40 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   21, 22, 27, 28, 31, 32, 8, 0, 3, 20, 35, 10, 11, 13, 36, 38, 
   2, 4, 5, 8, 10, 11, 15, 13, 23, 24, 8, 31, 32, 8, 6, 7, 
   12, 14, 16, 25, 26, 29, 30, 33, 34, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default : 
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec4[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec5[i2] & l2) != 0L);
      case 49:
         return ((jjbitVec6[i2] & l2) != 0L);
      case 51:
         return ((jjbitVec7[i2] & l2) != 0L);
      case 61:
         return ((jjbitVec8[i2] & l2) != 0L);
      default : 
         if ((jjbitVec3[i1] & l1) != 0L)
            return true;
         return false;
   }
}
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, "\12", null, null, null, 
"\56\143\141\164\143\150", "\56\143\154\141\163\163", "\56\145\156\144", "\56\146\151\145\154\144", 
"\56\154\151\155\151\164", "\56\154\151\156\145", "\56\155\145\164\150\157\144", "\56\163\145\164", 
"\56\163\165\160\145\162", "\56\163\157\165\162\143\145", "\56\164\150\162\157\167\163", 
"\56\166\141\162", "\56\151\155\160\154\145\155\145\156\164\163", 
"\56\151\156\164\145\162\146\141\143\145", "\164\157", "\165\163\151\156\147", "\151\163", "\146\162\157\155", 
"\155\145\164\150\157\144", "\141\142\163\164\162\141\143\164", "\146\151\156\141\154", 
"\151\156\164\145\162\146\141\143\145", "\156\141\164\151\166\145", "\160\162\151\166\141\164\145", 
"\160\162\157\164\145\143\164\145\144", "\160\165\142\154\151\143", "\163\164\141\164\151\143", 
"\163\171\156\143\150\162\157\156\151\172\145\144", "\164\162\141\156\163\151\145\156\164", "\166\157\154\141\164\151\154\145", 
"\154\157\157\153\165\160\163\167\151\164\143\150", "\164\141\142\154\145\163\167\151\164\143\150", 
"\144\145\146\141\165\154\164", "\75", "\72", null, null, null, null, null, null, null, null, null, null, null, 
null, };
public static final String[] lexStateNames = {
   "DEFAULT", 
   "MIDLINE", 
   "IN_SINGLE_LINE_COMMENT", 
};
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, 0, 2, 0, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, -1, -1, 1, -1, -1, -1, -1, 1, 
   -1, 1, 1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0x1a1ffffffffe21L, 
};
static final long[] jjtoSkip = {
   0x9eL, 
};
static final long[] jjtoMore = {
   0x140L, 
};
static protected JavaCharStream input_stream;
static private final int[] jjrounds = new int[40];
static private final int[] jjstateSet = new int[80];
static protected char curChar;
public JasminParserTokenManager(JavaCharStream stream)
{
   if (input_stream != null)
      throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);
   input_stream = stream;
}
public JasminParserTokenManager(JavaCharStream stream, int lexState)
{
   this(stream);
   SwitchTo(lexState);
}
static public void ReInit(JavaCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
static private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 40; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
static public void ReInit(JavaCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
static public void SwitchTo(int lexState)
{
   if (lexState >= 3 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

static protected Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.getBeginLine();
   t.beginColumn = input_stream.getBeginColumn();
   t.endLine = input_stream.getEndLine();
   t.endColumn = input_stream.getEndColumn();
   return t;
}

static int curLexState = 0;
static int defaultLexState = 0;
static int jjnewStateCnt;
static int jjround;
static int jjmatchedPos;
static int jjmatchedKind;

public static Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100002200L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         break;
       case 2:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_2();
         if (jjmatchedPos == 0 && jjmatchedKind > 8)
         {
            jjmatchedKind = 8;
         }
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

}
