/* Generated By:JavaCC: Do not edit this line. JasminParser.java */
package wt.parser.jasmin;

import java.io.*;
import java.util.*;
import de.fub.bytecode.*;
import de.fub.bytecode.generic.*;

public class JasminParser implements JasminParserConstants {

  static final String NON_INSTRUCTION = "NON_INSTRUCTION";

  static ClassGen cg = null;
  static ConstantPoolGen cp = null;
  static InstructionFactory factory = null;
  static String classSource = null;
  static String className = null;
  static int classAccess;
  static String classSuper = null;
  static ArrayList interfaces = new ArrayList();
  static String labelName = null;

  public static void main(String args[])
        throws IOException, UnsupportedEncodingException, ParseException
  {
    JasminParser parser;
    if (args.length == 0) {
      System.out.println("Jasmin Parser Version 1.0 by Wang Tao.");
      System.out.println("Usage:");
      System.out.println("java wt.parser.jasmin.JasminParser a_jasmin_file.j");
      System.exit(0);
    } else if (args.length == 1) {
        //parser = new JasminParser(new InputStreamReader(new java.io.FileInputStream(args[0]), "UTF-8"));
        parser = new JasminParser(new java.io.FileInputStream(args[0]));
        parser.jas_file();
        String jasFileName = args[0];
        String classFileName = jasFileName.substring(0,jasFileName.lastIndexOf(".")) + ".class";
        cg.getJavaClass().dump(classFileName);
    }
  }

  private static InstructionHandle getInstructionHandleByLabel(MethodGen mg, Hashtable labels, String label)
    throws ParseException
  {
    if(labels.get(label) == null)
        throw new ParseException("Not defined label '" + label + "' in method '" + mg.getName() + mg.getSignature() + "'.");
    if(labels.get(label) == NON_INSTRUCTION)
        throw new ParseException("No instruction for label '" + label +"' in method '" + mg.getName() + mg.getSignature() + "'.");
    return (InstructionHandle)labels.get(label);
  }

/* The grammar */
  static final public void jas_file() throws ParseException {
    source_spec();
    class_spec();
    super_spec();
    implements_list();
    fields();
    methods();
  }

/* // ---- Source specification */
  static final public void source_spec() throws ParseException {
        Token w;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DSOURCE:
      jj_consume_token(DSOURCE);
      w = jj_consume_token(Word);
      jj_consume_token(SEP);
                classSource = w.image;
      break;
    default:
      jj_la1[0] = jj_gen;
      ;
    }
  }

/* Class specification */
  static final public void class_spec() throws ParseException {
        int acc;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DCLASS:
      jj_consume_token(DCLASS);
      classAccess = access();
      className = classname();
      jj_consume_token(SEP);
      break;
    case DINTERFACE:
      jj_consume_token(DINTERFACE);
      acc = access();
      className = classname();
      jj_consume_token(SEP);
        classAccess = acc |
                      Constants.ACC_SUPER |
                      Constants.ACC_INTERFACE;
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public String classname() throws ParseException {
        Token w;
    w = jj_consume_token(Word);
        {if (true) return ScannerUtils.convertDots(w.image);}
    throw new Error("Missing return statement in function");
  }

  static final public int access() throws ParseException {
        int access_val = 0;
    access_val = access_list();
        {if (true) return access_val;}
    throw new Error("Missing return statement in function");
  }

  static final public int access_list() throws ParseException {
        int access_val = 0;
        int acc;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
      case FINAL:
      case INTERFACE:
      case NATIVE:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case STATIC:
      case SYNCHRONIZED:
      case TRANSIENT:
      case VOLATILE:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_1;
      }
      acc = access_item();
                        access_val |= acc;
    }
                {if (true) return access_val;}
    throw new Error("Missing return statement in function");
  }

  static final public int access_item() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PUBLIC:
      jj_consume_token(PUBLIC);
                     {if (true) return Constants.ACC_PUBLIC;}
      break;
    case PRIVATE:
      jj_consume_token(PRIVATE);
                     {if (true) return Constants.ACC_PRIVATE;}
      break;
    case PROTECTED:
      jj_consume_token(PROTECTED);
                     {if (true) return Constants.ACC_PROTECTED;}
      break;
    case STATIC:
      jj_consume_token(STATIC);
                     {if (true) return Constants.ACC_STATIC;}
      break;
    case FINAL:
      jj_consume_token(FINAL);
                     {if (true) return Constants.ACC_FINAL;}
      break;
    case SYNCHRONIZED:
      jj_consume_token(SYNCHRONIZED);
                     {if (true) return Constants.ACC_SYNCHRONIZED;}
      break;
    case VOLATILE:
      jj_consume_token(VOLATILE);
                     {if (true) return Constants.ACC_VOLATILE;}
      break;
    case TRANSIENT:
      jj_consume_token(TRANSIENT);
                     {if (true) return Constants.ACC_TRANSIENT;}
      break;
    case NATIVE:
      jj_consume_token(NATIVE);
                     {if (true) return Constants.ACC_NATIVE;}
      break;
    case INTERFACE:
      jj_consume_token(INTERFACE);
                     {if (true) return Constants.ACC_INTERFACE;}
      break;
    case ABSTRACT:
      jj_consume_token(ABSTRACT);
                     {if (true) return Constants.ACC_ABSTRACT;}
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/* Superclass specification */
  static final public void super_spec() throws ParseException {
    jj_consume_token(DSUPER);
    classSuper = classname();
    jj_consume_token(SEP);
  }

/* Implements specification */
  static final public void implements_list() throws ParseException {
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SEP:
      case DIMPLEMENTS:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_2;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DIMPLEMENTS:
        implements_spec();
        break;
      case SEP:
        jj_consume_token(SEP);
        break;
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
            String[] infs = new String[interfaces.size()];
            for(int i=0; i<interfaces.size(); i++){
                infs[i] = (String)interfaces.get(i);
            }
            cg = new ClassGen(className, classSuper, classSource, classAccess, infs);
            cp = cg.getConstantPool(); // cg creates constant pool
                factory = new InstructionFactory(cg);
  }

  static final public void implements_spec() throws ParseException {
        String name;
    jj_consume_token(DIMPLEMENTS);
    name = classname();
    jj_consume_token(SEP);
                interfaces.add(name);
  }

/* Fields */
  static final public void fields() throws ParseException {
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DFIELD:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_3;
      }
      field_spec();
    }
  }

  static final public void field_spec() throws ParseException {
        int acc;
        Token name;
        Token sig;
        Object defaultValue;
    jj_consume_token(DFIELD);
    acc = access();
    name = jj_consume_token(Word);
    sig = jj_consume_token(Word);
    defaultValue = optional_default();
    jj_consume_token(SEP);
    FieldGen fg = new FieldGen(acc, Type.getType(sig.image), name.image, cp);
    if(defaultValue != null){
        if(defaultValue instanceof Integer){
            if("Z".equals(sig.image)){//boolean type
                if(((Integer)defaultValue).intValue() == 0)
                        fg.setInitValue(false);
                else fg.setInitValue(true);
            }
            else if("J".equals(sig.image)){//long type
                fg.setInitValue(((Integer)defaultValue).longValue());
            }
            else {
                fg.setInitValue(((Integer)defaultValue).intValue());
            }
        }
        if(defaultValue instanceof Long){
            if("Z".equals(sig.image)){//boolean type
                if(((Long)defaultValue).longValue() == 0L)
                    fg.setInitValue(false);
                else fg.setInitValue(true);
            }
            else fg.setInitValue(((Long)defaultValue).longValue());
        }
        if(defaultValue instanceof Float) fg.setInitValue(((Float)defaultValue).floatValue());
        if(defaultValue instanceof Double) fg.setInitValue(((Double)defaultValue).doubleValue());
        if(defaultValue instanceof String) fg.setInitValue((String)defaultValue);
    }
    cg.addField(fg.getField());
  }

/* default value for a field */
  static final public Object optional_default() throws ParseException {
        Object defaultValue = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQ:
      jj_consume_token(EQ);
      defaultValue = item();
      break;
    default:
      jj_la1[7] = jj_gen;
      ;
    }
                {if (true) return defaultValue;}
    throw new Error("Missing return statement in function");
  }

/* an item is an integer, a float/double/long, or a quoted string */
  static final public Object item() throws ParseException {
        Token i, n, s;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Int:
      i = jj_consume_token(Int);
        {if (true) return ScannerUtils.convertIntObject(i.image);}
      break;
    case Num:
      n = jj_consume_token(Num);
        {if (true) return ScannerUtils.convertNumObject(n.image);}
      break;
    case Str:
      s = jj_consume_token(Str);
        //remove two double quotations
        {if (true) return s.image.substring(1,s.image.length()-1);}
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/* Methods */
  static final public void methods() throws ParseException {
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DMETHOD:
        ;
        break;
      default:
        jj_la1[9] = jj_gen;
        break label_4;
      }
      method_spec();
    }
  }

  static final public void method_spec() throws ParseException {
        MethodGen mg;
    mg = defmethod();
    statements(mg);
    endmethod();
        cg.addMethod(mg.getMethod());
  }

  static final public MethodGen defmethod() throws ParseException {
        int acc;
        Token name;
    jj_consume_token(DMETHOD);
    acc = access();
    name = jj_consume_token(Word);
    jj_consume_token(SEP);
        String split[] = ScannerUtils.splitMethodSignature(name.image);
        InstructionList il = new InstructionList();
        Type returnType = Type.getReturnType(split[1]);
        Type[] argTypes = Type.getArgumentTypes(split[1]);
        MethodGen mg = new MethodGen(
                acc,
                returnType,
                argTypes,
                new String[argTypes.length], //arg names, for later use
                split[0], //method name
                ScannerUtils.convertChars(className, "/", '.'), //class name
                il,
                cp);
        {if (true) return mg;}
    throw new Error("Missing return statement in function");
  }

  static final public void endmethod() throws ParseException {
    jj_consume_token(DEND);
    jj_consume_token(METHOD);
    jj_consume_token(SEP);
  }

/* Statements in a method */
  static final public void statements(MethodGen mg) throws ParseException {
    //pair of <label name>:<instruction handle>
        Hashtable labels = new Hashtable();
        //pair of <LocalVariableGen object>:<ScopeOfLocalVar object>
        Hashtable localVars = new Hashtable();
        //TempBranchInstruction instances
        ArrayList branchInstructions = new ArrayList();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SEP:
      case DCATCH:
      case DLIMIT:
      case DLINE:
      case DSET:
      case DTHROWS:
      case DVAR:
      case LOOKUPSWITCH:
      case TABLESWITCH:
      case Word:
        ;
        break;
      default:
        jj_la1[10] = jj_gen;
        break label_5;
      }
      statement(mg, labels, localVars, branchInstructions);
    }
                //adjust local variables scope
                //argument names
                Iterator itr = localVars.keySet().iterator();
                int argCount = mg.getArgumentNames().length;
                while(itr.hasNext()){
                    LocalVariableGen localVarGen = (LocalVariableGen)itr.next();
                    ScopeOfLocalVar varScope = (ScopeOfLocalVar)localVars.get(localVarGen);
                    localVarGen.setStart(getInstructionHandleByLabel(mg, labels, varScope.startLabel));
                    localVarGen.setEnd(getInstructionHandleByLabel(mg, labels, varScope.endLabel));
                    int c = 0;
                    if(argCount > 0){
                        String argName = "arg"+c;
                        mg.setArgumentName(c, argName);
                        c++;
                        argCount--;
                    }
                }

                //adjust branch instructions
                for(int i=0; i<branchInstructions.size(); i++){
                    Object insn = branchInstructions.get(i);
                    if(insn instanceof TempBranchInstruction){
                        TempBranchInstruction bInsn = (TempBranchInstruction)insn;
                        bInsn.instruction.setTarget(getInstructionHandleByLabel(mg, labels, bInsn.target));
                    } else if(insn instanceof TempSwitch){
                        TempSwitch sInsn  = (TempSwitch)insn;
                InstructionHandle[] targets = new InstructionHandle[sInsn.targets.size()];
                for(int j=0; j< targets.length; j++){
                    targets[j] = getInstructionHandleByLabel(mg, labels, (String)sInsn.targets.get(j));
                }
                InstructionHandle defaultTarget = getInstructionHandleByLabel(mg, labels, sInsn.defaultTarget);
                int[] matches = new int[sInsn.match.size()];
                for(int j=0; j<matches.length; j++){
                    matches[j] = ((Integer)sInsn.match.get(j)).intValue();
                }
                        if(sInsn.type == TempSwitch.TABLESWITCH){
                            sInsn.ih.setInstruction(new TABLESWITCH(matches, targets, defaultTarget));
                        } else if(sInsn.type == TempSwitch.LOOKUPSWITCH){
                            sInsn.ih.setInstruction(new TABLESWITCH(matches, targets, defaultTarget));
                        }
                    }
                }
  }

  static final public void statement(MethodGen mg, Hashtable labels, Hashtable localVars, ArrayList branchInstructions) throws ParseException {
        Token firstTokenOfStmt = JasminParser.getToken(1);
        int stmtLine = firstTokenOfStmt.beginLine;
        InstructionHandle ih = null;
    ih = stmnt(mg, labels, localVars, branchInstructions);
    jj_consume_token(SEP);
        if(ih != null) mg.addLineNumber(ih, stmtLine);
  }

  static final public InstructionHandle stmnt(MethodGen mg, Hashtable labels, Hashtable localVars, ArrayList branchInstructions) throws ParseException {
        InstructionHandle ih = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DCATCH:
    case DLIMIT:
    case DLINE:
    case DSET:
    case DTHROWS:
    case DVAR:
    case LOOKUPSWITCH:
    case TABLESWITCH:
    case Word:
      if (jj_2_1(2)) {
        label(labels);
                           {if (true) return null;}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DCATCH:
        case DLIMIT:
        case DLINE:
        case DSET:
        case DTHROWS:
        case DVAR:
          directive(mg, labels, localVars);
                                              {if (true) return null;}
          break;
        case LOOKUPSWITCH:
        case TABLESWITCH:
        case Word:
          ih = instruction(mg, branchInstructions);
                if(labelName != null){
                    labels.put(labelName, ih);
                    labelName = null;
                }
                {if (true) return ih;}
          break;
        default:
          jj_la1[11] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      break;
    default:
      jj_la1[12] = jj_gen;
      ;
    }
    throw new Error("Missing return statement in function");
  }

/* label: */
  static final public void label(Hashtable labels) throws ParseException {
        Token label;
    label = jj_consume_token(Word);
    jj_consume_token(COLON);
    labels.put(label.image, NON_INSTRUCTION);
    labelName = label.image;
  }

/* Directives (.catch, .set, .limit, etc.) */
  static final public void directive(MethodGen mg, Hashtable labels, Hashtable localVars) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DVAR:
      jj_consume_token(DVAR);
      var_expr(mg, localVars);
      break;
    case DLIMIT:
      jj_consume_token(DLIMIT);
      limit_expr(mg);
      break;
    case DLINE:
      jj_consume_token(DLINE);
      line_expr();
      break;
    case DTHROWS:
      jj_consume_token(DTHROWS);
      throws_expr(mg);
      break;
    case DCATCH:
      jj_consume_token(DCATCH);
      catch_expr(mg, labels);
      break;
    case DSET:
      jj_consume_token(DSET);
      set_expr();
      break;
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/* .var <num> is <name> <sig> from StartLab to EndLab */
  static final public void var_expr(MethodGen mg, Hashtable localVars) throws ParseException {
        Token reg = null, name = null, sig = null, slab = null, elab = null;
    reg = jj_consume_token(Int);
    jj_consume_token(IS);
    name = jj_consume_token(Word);
    sig = jj_consume_token(Word);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FROM:
      jj_consume_token(FROM);
      slab = jj_consume_token(Word);
      jj_consume_token(TO);
      elab = jj_consume_token(Word);
      break;
    default:
      jj_la1[14] = jj_gen;
      ;
    }
    LocalVariableGen lg = mg.addLocalVariable(name.image,
                                              Type.getType(sig.image), ScannerUtils.convertInt(reg.image),
                                              null, null);
        if(slab !=null){
                ScopeOfLocalVar varScope = new ScopeOfLocalVar();
                varScope.startLabel = slab.image;
                varScope.endLabel = elab.image;
                localVars.put(lg, varScope);
        }
  }

/*
 .limit stack <val>
 .limit locals <val>
*/
  static final public void limit_expr(MethodGen mg) throws ParseException {
        Token w, v;
    w = jj_consume_token(Word);
    v = jj_consume_token(Int);
    // .limit locals
    if (w.image.equals("locals") || w.image.equals("vars")) // "vars" for historic reasons
        mg.setMaxLocals(ScannerUtils.convertInt(v.image));
    // .limit stack
    else if (w.image.equals("stack"))
        mg.setMaxStack(ScannerUtils.convertInt(v.image));
    else
        {if (true) throw new ParseException(".limit expected \"stack\" or \"locals\", but got " + w.image);}
  }

/* .line <num> */
  static final public void line_expr() throws ParseException {
        Token v;
    v = jj_consume_token(Int);

  }

/* .throws <class> */
  static final public void throws_expr(MethodGen mg) throws ParseException {
        String s;
    s = classname();
                mg.addException(ScannerUtils.convertChars(s, "/", '.'));
  }

/* .catch <class> from <label1> to <label2> using <branchlab> */
/* Assumption: .catch statements are at the end of instruction list */
  static final public void catch_expr(MethodGen mg, Hashtable labels) throws ParseException {
        String aclass;
        Token fromlab, tolab, branchlab;
    aclass = classname();
    jj_consume_token(FROM);
    fromlab = jj_consume_token(Word);
    jj_consume_token(TO);
    tolab = jj_consume_token(Word);
    jj_consume_token(USING);
    branchlab = jj_consume_token(Word);
    mg.addExceptionHandler(
            getInstructionHandleByLabel(mg, labels, fromlab.image),
            getInstructionHandleByLabel(mg, labels, tolab.image),
            getInstructionHandleByLabel(mg, labels, branchlab.image),
            new ObjectType(ScannerUtils.convertChars(aclass, "/", '.')));
  }

/* .set <var> = <val> */
  static final public void set_expr() throws ParseException {
        Token name, v, s;
    if (jj_2_2(2)) {
      name = jj_consume_token(Word);
      v = jj_consume_token(Int);
        ScannerUtils.dict.put(name.image, ScannerUtils.convertIntObject(v.image));
    } else if (jj_2_3(2)) {
      name = jj_consume_token(Word);
      v = jj_consume_token(Word);
      ScannerUtils.dict.put(name.image, v.image);
    } else if (jj_2_4(2)) {
      name = jj_consume_token(Word);
      v = jj_consume_token(Num);
        ScannerUtils.dict.put(name.image, ScannerUtils.convertNumObject(v.image));
    } else if (jj_2_5(2)) {
      name = jj_consume_token(Word);
      v = jj_consume_token(Str);
      ScannerUtils.dict.put(name.image, v.image);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/* instruction */
  static final public InstructionHandle instruction(MethodGen mg, ArrayList branchInstructions) throws ParseException {
    InstructionHandle ih = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Word:
      ih = simple_instruction(mg, branchInstructions);
        {if (true) return ih;}
      break;
    case LOOKUPSWITCH:
    case TABLESWITCH:
      ih = complex_instruction(mg, branchInstructions);
        {if (true) return ih;}
      break;
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/*
 Various patterns of instruction:
      instruction [<pattern>]
*/
  static final public InstructionHandle simple_instruction(MethodGen mg, ArrayList branchInstructions) throws ParseException {
        Token i, n, n1, n2, s1, s2;
    if (jj_2_6(3)) {
      i = jj_consume_token(Word);
      n1 = jj_consume_token(Int);
      n2 = jj_consume_token(Int);
     // used for iinc
        {if (true) return InstructionPattern_Int_Int.process(mg, i, n1, n2);}
    } else if (jj_2_7(3)) {
      i = jj_consume_token(Word);
      n = jj_consume_token(Word);
      n2 = jj_consume_token(Int);
     // used for invokeinterface and multianewarray
        {if (true) return InstructionPattern_Word_Int.process(mg, i, n, n2);}
    } else if (jj_2_8(3)) {
      i = jj_consume_token(Word);
      n1 = jj_consume_token(Word);
      n2 = jj_consume_token(Word);
        // used for instructions that take a field and a signature as parameters
        // (e.g. getstatic, putstatic, getfield, putfield)
        {if (true) return InstructionPattern_Word_Word.process(mg, i, n1, n2);}
    } else if (jj_2_9(2)) {
      i = jj_consume_token(Word);
      n = jj_consume_token(Int);
        // used for instructions that take an integer parameter
        //ldc, ldc_w, ldc2_w
        //aload, astore, bipush, dload, dstore, fload, fstore, iload, istore
        //lload, lstore, ret, ret_w, sipush
        {if (true) return InstructionPattern_Int.process(mg, i, n);}
    } else if (jj_2_10(2)) {
      i = jj_consume_token(Word);
      n = jj_consume_token(Num);
        // used for instructions that take an number parameter
        //ldc, ldc_w, ldc2_w
        {if (true) return InstructionPattern_Num.process(mg, i, n);}
    } else if (jj_2_11(2)) {
      i = jj_consume_token(Word);
      n = jj_consume_token(Word);
        // used for instructions that take a word as a parameter
        // branches, newarray, invokemethod
        {if (true) return InstructionPattern_Word.process(mg, i, n, branchInstructions);}
    } else if (jj_2_12(2)) {
      i = jj_consume_token(Word);
      n = jj_consume_token(Str);
        // used for instructions that take a string parameter
        //ldc, ldc_w
        {if (true) return InstructionPattern_Str.process(mg, i, n);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case Word:
        i = jj_consume_token(Word);
      // used for instructions that take no arguments
        {if (true) return InstructionPattern_NoParam.process(mg, i);}
        break;
      default:
        jj_la1[16] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

/*
 complex (i.e. multiline) instructions
      lookupswitch <lookup>
      tableswitch  <table>
*/
  static final public InstructionHandle complex_instruction(MethodGen mg, ArrayList branchInstructions) throws ParseException {
    InstructionHandle ih = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LOOKUPSWITCH:
      jj_consume_token(LOOKUPSWITCH);
      ih = lookup(mg, branchInstructions);
                                                        {if (true) return ih;}
      break;
    case TABLESWITCH:
      jj_consume_token(TABLESWITCH);
      ih = table(mg, branchInstructions);
                                                      {if (true) return ih;}
      break;
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/*
 lookupswitch
     <value> : <label>
     <value> : <label>
     ...
     default : <label>
*/
  static final public InstructionHandle lookup(MethodGen mg, ArrayList branchInstructions) throws ParseException {
    TempSwitch tempSwitch = new TempSwitch();
    InstructionHandle ih = null;
    ih = lookup_args(mg, tempSwitch);
    lookup_list(tempSwitch);
    lookup_default(tempSwitch);
    branchInstructions.add(tempSwitch);
    {if (true) return ih;}
    throw new Error("Missing return statement in function");
  }

  static final public InstructionHandle lookup_args(MethodGen mg, TempSwitch tempSwitch) throws ParseException {
    jj_consume_token(SEP);
     InstructionList il = mg.getInstructionList();
     tempSwitch.ih = il.append(new LOOKUPSWITCH((new int[0]), (new InstructionHandle[0]), null));
     tempSwitch.type = TempSwitch.LOOKUPSWITCH;
     {if (true) return tempSwitch.ih;}
    throw new Error("Missing return statement in function");
  }

  static final public void lookup_list(TempSwitch tempSwitch) throws ParseException {
    label_6:
    while (true) {
      lookup_entry(tempSwitch);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case Int:
        ;
        break;
      default:
        jj_la1[18] = jj_gen;
        break label_6;
      }
    }
  }

  static final public void lookup_entry(TempSwitch tempSwitch) throws ParseException {
        Token i, w;
    i = jj_consume_token(Int);
    jj_consume_token(COLON);
    w = jj_consume_token(Word);
    jj_consume_token(SEP);
    tempSwitch.match.add(new Integer(ScannerUtils.convertInt(i.image)));
    tempSwitch.targets.add(w.image);
  }

  static final public void lookup_default(TempSwitch tempSwitch) throws ParseException {
        Token w;
    jj_consume_token(DEFAULT_BRANCH);
    jj_consume_token(COLON);
    w = jj_consume_token(Word);
          tempSwitch.defaultTarget = w.image;
  }

/*
 tableswitch <low> [<high>]
     <label>
     <label>
     ...
     default : <label>
*/
  static final public InstructionHandle table(MethodGen mg, ArrayList branchInstructions) throws ParseException {
    TempSwitch tempSwitch = new TempSwitch();
    InstructionHandle ih = null;
    ih = table_args(mg, tempSwitch);
    table_list(tempSwitch);
    table_default(tempSwitch);
    if(tempSwitch.match.size() == 1){
        int l = ((Integer)tempSwitch.match.get(0)).intValue();
        int h = l + tempSwitch.targets.size() - 1;
        for(int i=l+1; i<=h; i++){
            tempSwitch.match.add(new Integer(i));
        }
    }
    branchInstructions.add(tempSwitch);
    {if (true) return ih;}
    throw new Error("Missing return statement in function");
  }

  static final public InstructionHandle table_args(MethodGen mg, TempSwitch tempSwitch) throws ParseException {
        Token low, high;
    InstructionList il = mg.getInstructionList();
    tempSwitch.type = TempSwitch.TABLESWITCH;
    if (jj_2_13(2)) {
      low = jj_consume_token(Int);
      jj_consume_token(SEP);
        tempSwitch.match.add(new Integer(ScannerUtils.convertInt(low.image)));
        tempSwitch.ih = il.append(new TABLESWITCH((new int[0]), (new InstructionHandle[0]), null));
        {if (true) return tempSwitch.ih;}
    } else if (jj_2_14(2)) {
      low = jj_consume_token(Int);
      high = jj_consume_token(Int);
      jj_consume_token(SEP);
        int l, h;
        l = ScannerUtils.convertInt(low.image);
        h = ScannerUtils.convertInt(high.image);
        for(int i=l; i<=h; i++){
            tempSwitch.match.add(new Integer(i));
        }
        tempSwitch.ih = il.append(new TABLESWITCH((new int[0]), (new InstructionHandle[0]), null));
        {if (true) return tempSwitch.ih;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public void table_list(TempSwitch tempSwitch) throws ParseException {
    label_7:
    while (true) {
      table_entry(tempSwitch);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case Word:
        ;
        break;
      default:
        jj_la1[19] = jj_gen;
        break label_7;
      }
    }
  }

  static final public void table_entry(TempSwitch tempSwitch) throws ParseException {
        Token w;
    w = jj_consume_token(Word);
    jj_consume_token(SEP);
    tempSwitch.targets.add(w.image);
  }

  static final public void table_default(TempSwitch tempSwitch) throws ParseException {
        Token w;
    jj_consume_token(DEFAULT_BRANCH);
    jj_consume_token(COLON);
    w = jj_consume_token(Word);
    tempSwitch.defaultTarget = w.image;
  }

  static final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static final private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static final private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static final private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static final private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static final private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  static final private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  static final private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  static final private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  static final private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  static final private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  static final private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  static final private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  static final private boolean jj_3_9() {
    if (jj_scan_token(Word)) return true;
    if (jj_scan_token(Int)) return true;
    return false;
  }

  static final private boolean jj_3_11() {
    if (jj_scan_token(Word)) return true;
    if (jj_scan_token(Word)) return true;
    return false;
  }

  static final private boolean jj_3_5() {
    if (jj_scan_token(Word)) return true;
    if (jj_scan_token(Str)) return true;
    return false;
  }

  static final private boolean jj_3R_8() {
    if (jj_scan_token(Word)) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  static final private boolean jj_3_8() {
    if (jj_scan_token(Word)) return true;
    if (jj_scan_token(Word)) return true;
    if (jj_scan_token(Word)) return true;
    return false;
  }

  static final private boolean jj_3_6() {
    if (jj_scan_token(Word)) return true;
    if (jj_scan_token(Int)) return true;
    if (jj_scan_token(Int)) return true;
    return false;
  }

  static final private boolean jj_3_10() {
    if (jj_scan_token(Word)) return true;
    if (jj_scan_token(Num)) return true;
    return false;
  }

  static final private boolean jj_3_4() {
    if (jj_scan_token(Word)) return true;
    if (jj_scan_token(Num)) return true;
    return false;
  }

  static final private boolean jj_3_7() {
    if (jj_scan_token(Word)) return true;
    if (jj_scan_token(Word)) return true;
    if (jj_scan_token(Int)) return true;
    return false;
  }

  static final private boolean jj_3_2() {
    if (jj_scan_token(Word)) return true;
    if (jj_scan_token(Int)) return true;
    return false;
  }

  static final private boolean jj_3_1() {
    if (jj_3R_8()) return true;
    return false;
  }

  static final private boolean jj_3_3() {
    if (jj_scan_token(Word)) return true;
    if (jj_scan_token(Word)) return true;
    return false;
  }

  static final private boolean jj_3_12() {
    if (jj_scan_token(Word)) return true;
    if (jj_scan_token(Str)) return true;
    return false;
  }

  static final private boolean jj_3_14() {
    if (jj_scan_token(Int)) return true;
    if (jj_scan_token(Int)) return true;
    return false;
  }

  static final private boolean jj_3_13() {
    if (jj_scan_token(Int)) return true;
    if (jj_scan_token(SEP)) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  static public JasminParserTokenManager token_source;
  static JavaCharStream jj_input_stream;
  static public Token token, jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static public boolean lookingAhead = false;
  static private boolean jj_semLA;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[20];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_0();
      jj_la1_1();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x40000,0x400400,0xf0000000,0xf0000000,0x200020,0x200020,0x1000,0x0,0x0,0x8000,0x196220,0x196200,0x196200,0x196200,0x4000000,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x7f,0x7f,0x0,0x0,0x0,0x400,0xa1000,0x0,0x100180,0x100180,0x100180,0x0,0x0,0x100180,0x100000,0x180,0x1000,0x100000,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[14];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  public JasminParser(java.io.InputStream stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  You must");
      System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new JasminParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static public void ReInit(java.io.InputStream stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public JasminParser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  You must");
      System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new JasminParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public JasminParser(JasminParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  You must");
      System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(JasminParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  static final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.Vector jj_expentries = new java.util.Vector();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  static public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[56];
    for (int i = 0; i < 56; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 20; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 56; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  static final public void enable_tracing() {
  }

  static final public void disable_tracing() {
  }

  static final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 14; i++) {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
          }
        }
        p = p.next;
      } while (p != null);
    }
    jj_rescan = false;
  }

  static final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
